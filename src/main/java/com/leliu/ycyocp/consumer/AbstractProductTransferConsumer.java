/*
 * Copyright 2020 Lewis Liu. All Rights Reserved.
 */
package com.leliu.ycyocp.consumer;

import com.leliu.ycyocp.model.ConsumeResult;
import com.leliu.ycyocp.model.Product;
import com.leliu.ycyocp.producer.YcyProducer;

/**
 * The abstract decorator which can be used to adapter the target consumer.
 * <p>
 * It's often used when the {@link Product} generated by the {@link YcyProducer} is different from
 * the one consumed by the {@link YcyConsumer}.
 *
 * @param <TSourceProduct>
 * @param <TTargetProduct>
 * @param <TConsumeResult>
 */
public abstract class AbstractProductTransferConsumer<
        TSourceProduct extends Product,
        TTargetProduct extends Product,
        TConsumeResult extends ConsumeResult> implements YcyConsumer<TSourceProduct, TConsumeResult> {
    private YcyConsumer<TTargetProduct, TConsumeResult> targetConsumer;

    protected AbstractProductTransferConsumer(YcyConsumer<TTargetProduct, TConsumeResult> targetConsumer) {
        this.targetConsumer = targetConsumer;
    }

    @Override
    public TConsumeResult consume(TSourceProduct sourceProduct) {
        TTargetProduct targetProduct = this.transfer(sourceProduct);
        return this.targetConsumer.consume(targetProduct);
    }

    public YcyConsumer<TTargetProduct, TConsumeResult> getTargetConsumer() {
        return targetConsumer;
    }

    protected abstract TTargetProduct transfer(TSourceProduct sourceProduct);
}
